#!/usr/bin/env es
# vi: ft=es

fn info {
	echo '>>> info:' $*
}

fn lastelem elems {
	result $elems($#elems)
}

esbin = <={
	if {access -xf ./es} {
		result ./es
	} {
		result <={access -1n es -xf $path}
	}
}

dollar0 = $0
runbin = false
testoutput = false
estest_debugging = false
testpath = 'tests'
print_failure_output = true
print_failure_stderr = false
extra_es_args = false
always_yes = false

(_ _ restargs) = <={parseargs @ arg {
	match $arg (
		(-h) { usage }
		(-x) { runbin = true }
		(-v) { testoutput = true }
		(-d) { estest_debugging = true }
		(-q) { print_failure_output = false; testoutput = false }
		(-A) {
			if {! $runbin} { usage }
			extra_es_args = true; done
		}
		(-y) { always_yes = true }
		(-p) {
			testpath = <={
				if {~ $flagarg */} {
					result <={~~ $flagarg */}
				} {
					result $flagarg
				}
			}
		}
		* { usage }
	)
} @{
	echo 'usage: '^$dollar0^' [-xdvqy] [-p path] [-A es arguments]'
	exit 1
} $*}

fn output {
	if {$print_failure_stderr} {
		echo >[1=2] $*
	} {
		echo $*
	}
}

fn run_test_file file {
	assert2 $0 {eq $#file 1}
	lets (
		testname = <={~~ <={lastelem <={%split '/' $file}} test_*.es}
		passed = false
		test_exception=
		test_log='/tmp/es_'^$pid^'_test_'^$testname^'.log'
		tfp = 'test_'^$testname^'_fail_pass'
	) {
		. $file
		if {~ <={%count $$tfp} 0} {
			$tfp = false
		}
		catch @ e {
			test_exception = $e
			if {$$tfp} {
				passed = true
			} {
				passed = false
			}
		} {
			run_test_$testname > $test_log
			if {$$tfp} {
				passed = false
			} {
				passed = true
			}
		}
 		echo -n 'test '^$testname^': '
		if {$passed} {
			echo 'passed!'
			if {$testoutput} {
				output '>>> '^$testname^' output:'
				for(outline = ``(\n) {cat $test_log}) {
					output '>>>>>> '^$^outline
				}
			}
		} {
			echo 'failed!'
			echo '>>> exception: '^$^test_exception
			if {$print_failure_output} {
				output '>>> '^$testname^' output:'
				for(outline = ``(\n) {cat $test_log}) {
					output '>>>>>> '^$^outline
				}
			}
		}
	rm $test_log
	result $passed
	}
}

fn run_all_tests {
	for(i = $testfiles) {
		run_test_file $i
	}
}

if {$runbin} {
	debugarg = <={ if {$estest_debugging} { result '-d' } { result '' }}
	testoutputarg = <={ if {$testoutput} { result '-v' } { result '' }}
	cmdline = $esbin
	if {$extra_es_args} { cmdline = $cmdline $restargs }
	cmdline = $cmdline '--' $0
	if {$estest_debugging} { cmdline = $cmdline '-d' }
	if {$testoutput} { cmdline = $cmdline '-v' }
	if {$always_yes} { cmdline = $cmdline '-y' }
	cmdline = $cmdline '-p' $testpath
	echo 'running:' $cmdline
	$cmdline
	# $esbin -- $0 $debugarg $testoutputarg -p $testpath
} {
	info 'build: '^$buildstring
	info 'using '^<={%gcstats |> %first}^' garbage collector'
	info 'running tests in '^$testpath^'/'

	testfiles = <={
		process $testpath/*.es (
			(*/test_*) {
				if {access -xf $matchexpr} {
					result $matchexpr
				} {
					result
				}
			}
			(*/util_*) {
				if {access -xf $matchexpr} {
					echo >[2=1] 'loading '^$matchexpr
					. $matchexpr
				}
				result
			}
			* { result }
		)
	}

	match $#testfiles (
		0 { info 'found no tests' }
		1 { info 'found 1 test' }
		* { info 'found '^$matchexpr^' tests' }
	)

	if {$always_yes} {
		run_all_tests
	} {
		echo -n 'run all tests [yes]? '
		r = <=%read
		if {~ $r '' || ~ $r [yY]*} {
			run_all_tests
		}
	}
}
